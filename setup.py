import subprocess
import os

from setuptools import setup, Extension

UTM_VERSION = "0.13.0"
PACKAGE_NAME = "tmGrammar"
PACKAGE_DIR = os.path.realpath(os.path.join(os.path.dirname(__file__), PACKAGE_NAME))
UTM_BASE = os.environ.get("UTM_BASE", "")
BOOST_BASE = os.environ.get("BOOST_BASE", "")

if not UTM_BASE:
    raise RuntimeError("'UTM_BASE' not defined or empty.")


def create_version_module():
    with open(os.path.join(PACKAGE_DIR, "_version.py"), "w") as f:
        f.write("# This file was auto generated by `setup.py`. Changes might be lost.\n")
        f.write(f"__version__ = \"{UTM_VERSION}\"\n")


def create_swig_wrapper():
    subprocess.check_call([
        "swig",
        "-c++",
        "-python",
        "-I{}".format(os.path.join(BOOST_BASE, "include")),
        "-I{}".format(os.path.join(UTM_BASE, "include")),
        os.path.join(PACKAGE_DIR, f"{PACKAGE_NAME}.i"),
    ])


swig_extension = Extension(
    name=f"_{PACKAGE_NAME}",
    define_macros=[("SWIG", "1"), ("NDEBUG", "1")],
    sources=[
        os.path.join(PACKAGE_DIR, f"{PACKAGE_NAME}_wrap.cxx"),
    ],
    include_dirs=[
        os.path.join(BOOST_BASE, "include"),
        os.path.join(UTM_BASE, "include"),
    ],
    library_dirs=[
        os.path.join(UTM_BASE, "lib"),
    ],
    libraries=["tmutil", "tmgrammar"],
    extra_compile_args=["-std=c++11", "-O2"],
)

create_version_module()
create_swig_wrapper()

setup(
    version=UTM_VERSION,
    ext_modules=[swig_extension],
    packages=[PACKAGE_NAME],
)
